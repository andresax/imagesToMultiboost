#include <opencv2/highgui.hpp>
#include <opencv2/core.hpp>
#include <iostream>
#include <sstream>
#include <boost/filesystem.hpp>
#include <boost/format.hpp>
#include <fstream>
#include <vector>

#include <string>
#include <map>

std::map<int,cv::Scalar> classColor;
std::map<int,int> colorGray;

int W=4;
int generate(){
 
 
  bool test=false;

  std::cout<<"Convert images for multiboost"<<std::endl;
for (int cur = 0; cur < 30; ++cur)
 {
   
  std::ofstream filetrain;
  std::stringstream filetrainStr;

  boost::format fmt("%04d");
  fmt % cur;

  if(!test)
    filetrain.open("trainCastle-00-07-15-24.arff");
  else 
    filetrain.open("testCastle-"+ fmt.str()+".arff");
  std::ifstream file,fileSeg;
  std::vector<std::pair<cv::Mat,cv::Mat>> trainSegmimage;
  std::string pathBase = "";
  //std::string pathBase = "/home/andrea/Desktop/Datasets/3DRMS-Challenge2017/training/";
  //std::vector<std::string> pathbases = {"/home/andrea/Desktop/Datasets/EpflDataset/fountain_dense/"};
  std::vector<std::string> pathbases = {"/home/andrea/Desktop/Datasets/EpflDataset/castle_dense_large/"};
  //std::vector<std::string> pathbases = {"/home/andrea/Desktop/Datasets/tum/scan15/"};
  //std::vector<std::string> pathbases = {"/home/andrea/Desktop/Datasets/tum/scan15/seg/train/rect_"};
  //std::vector<std::string> pathbases = {"/home/andrea/Desktop/Datasets/EpflDataset/fountain_dense/"};
  //std::vector<std::string> pathbases = {"train_boxwood_row"};
  //std::vector<std::string> pathbases = {"train_around_garden_roses","train_around_hedge"};
  //std::vector<std::string> pathbases = {"train_around_garden_roses","train_around_hedge","train_boxwood_row","train_boxwood_slope"};
  //std::vector<std::string> pathbases = {"train_around_garden_roses","train_around_hedge","train_boxwood_row","train_boxwood_slope"};
  std::vector<std::string> initFileName = {""};
  //std::vector<std::string> initFileName = {"uvc_camera_cam_0/uvc_camera_cam_0_f"};
  //std::vector<std::string> initFileName = {"uvc_camera_cam_0/uvc_camera_cam_0_f","uvc_camera_cam_2/uvc_camera_cam_2_f"};
  
  std::string initFileNameImage = "images/";

  std::string initFileNameSegm ;
  if(!test)
  initFileNameSegm = "seg/train/";
  else
  initFileNameSegm = "seg/test/";
  std::string endFileNameImage = ".png";
  std::string endFileNameSegm = ".png";
  //std::string endFileNameImage = "_max.png";
  //std::string endFileNameSegm = "_max.png";
  //std::string endFileNameImage = "_undist.png";
  //std::string endFileNameSegm = "_gtr.png";
  for (auto p:pathbases){
    for (auto n:initFileName){
      //for (int i = 0; i < 100; ++i){
        //boost::format fmt("%03d");
        //boost::format fmt("%05d");
        //fmt % i;
        std::string simage = pathBase + p + "/"+ n +initFileNameImage + fmt.str() + endFileNameImage;
        std::string ssegm = pathBase + p + "/"+ n + initFileNameSegm+ fmt.str() + endFileNameSegm;
        //ssegm=simage;
        //std::cout<<simage<<std::endl;
        //std::cout<<ssegm<<std::endl;
        //std::string simage = pathBase + p + "/"+ n + fmt.str() + endFileNameImage;
        //std::string ssegm = pathBase + p + "/"+ n + fmt.str() + endFileNameSegm;
        file.open(simage);
        fileSeg.open(ssegm);
        if(file.good() && fileSeg.good()){
          cv::Mat im = cv::imread(simage);
          cv::Mat se = cv::imread(ssegm);
         /* cv::imshow("im",im);
          cv::imshow("se",se);
          cv::waitKey();
*/
          std::cout<<simage<<std::endl;
          std::cout<<ssegm<<std::endl;

          cv::Mat seOK,imOk;
          se.convertTo(seOK,CV_32F);
          im.convertTo(imOk, CV_32F);

          trainSegmimage.push_back(std::pair<cv::Mat,cv::Mat>(imOk,seOK));
        }
        file.close();
        fileSeg.close();
     // }
    }
  }



  filetrainStr<<"@relation fountain"<<std::endl;
  int i=0;
  for (int rW = -W ; rW <=  W ; ++rW){
    for (int cW = - W ; cW <=  W; ++cW){
      boost::format fmt("%04d");
      fmt % i;
      filetrainStr<<"@attribute a"<<fmt.str()<<" numeric"<<std::endl;//R
      i++;
      fmt % i;
      filetrainStr<<"@attribute a"<<fmt.str()<<" numeric"<<std::endl;//G
      i++;
      fmt % i;
      filetrainStr<<"@attribute a"<<fmt.str()<<" numeric"<<std::endl;//b
      i++;
    }
  }
  filetrainStr<<"@attribute class {";

  for (auto c:classColor)  {
    if(c.first == classColor.size()-1)
      //if(c.first == 9)
      filetrainStr<<c.first<<"";
    else
      filetrainStr<<c.first<<",";
  }
  filetrainStr<<"}"<<std::endl;

int count=0;
  filetrainStr<<std::endl<<"@data"<<std::endl;
  for(auto p : trainSegmimage){
    std::cout<<"Processing new imGW"<<std::endl;
    for (int r = W; r < p.first.rows-W; ++r){
      for (int c = W; c < p.first.cols-W; ++c){
        if(count%3==0){

          int idClass;
          bool found=false;
          for (auto color : classColor){
            if(static_cast<int>(p.second.at<cv::Vec3f>(r,c).val[2]) == static_cast<int>(ceil(255.0 * color.second.val[0])) &&
              static_cast<int>(p.second.at<cv::Vec3f>(r,c).val[1]) == static_cast<int>(ceil(255.0 * color.second.val[1])) &&
              static_cast<int>(p.second.at<cv::Vec3f>(r,c).val[0]) == static_cast<int>(ceil(255.0 * color.second.val[2]))){
              found = true;
              idClass =color.first;
            }
          }

          if(found||test){
            for (int rW = (r - W >= 0 ? r - W : 0); rW < (r + W+1 < p.first.rows ? r + W+1 : p.first.rows); ++rW){
              for (int cW = (c - W >= 0 ? c - W : 0); cW < (c + W+1 < p.first.cols ? c + W+1 : p.first.cols); ++cW){
                filetrainStr<<p.first.at<cv::Vec3f>(rW,cW).val[0] <<",";
                filetrainStr<<p.first.at<cv::Vec3f>(rW,cW).val[1] <<",";
                filetrainStr<<p.first.at<cv::Vec3f>(rW,cW).val[2] << ",";
              }
            }
          
            if (found)
            filetrainStr<<""<<idClass<<std::endl;
            else
            filetrainStr<<""<<classColor.size()<<std::endl;

          }else{
            /*std::cout<<"ERROR"<<std::endl;
            std::cout<<p.second.at<cv::Vec3f>(r,c).val[2]<<", ";
            std::cout<<p.second.at<cv::Vec3f>(r,c).val[1]<<", ";
            std::cout<<p.second.at<cv::Vec3f>(r,c).val[0]<<std::endl;
            for (auto color : classColor){
            std::cout<<"color"<<color.first<<" ";
              std::cout<<ceil(255.0 * color.second.val[0])<<", ";
              std::cout<<ceil(255.0 * color.second.val[1])<<", ";
              std::cout<<ceil(255.0 * color.second.val[2])<<std::endl;              
            }*/
          }
        }
        count++;
      }
    }
  }

  filetrain << filetrainStr.rdbuf();
  filetrain.close();

 }
  return 0;
}




void read(){
  std::ifstream file;
  std::string simage = "/home/andrea/Desktop/Datasets/tum/scan15/images/rect_005_max.png";
 // std::string simage = "/home/andrea/Desktop/Datasets/EpflDataset/fountain_dense/images/0000.png";

  cv::Mat image = cv::imread(simage);
  int width = image.cols;
  int height = image.rows;

  std::vector<std::string> paths;
for (int cur = 1; cur < 50; ++cur) {
   
  boost::format fmt("%03d");
  fmt % cur;
   paths.push_back("/home/andrea/myLib/MultiBoost-1.2.02/outDTU15"+fmt.str());

  /*std::vector<std::string> paths = {"/home/andrea/myLib/MultiBoost-1.2.02/outFountain07",
                                    "/home/andrea/myLib/MultiBoost-1.2.02/outFountain10",
                                    "/home/andrea/myLib/MultiBoost-1.2.02/outFountain02",
                                    "/home/andrea/myLib/MultiBoost-1.2.02/outFountain03",
                                    "/home/andrea/myLib/MultiBoost-1.2.02/outFountain04",
                                    "/home/andrea/myLib/MultiBoost-1.2.02/outFountain05",
                                    "/home/andrea/myLib/MultiBoost-1.2.02/outFountain06",
                                    "/home/andrea/myLib/MultiBoost-1.2.02/outFountain07"
                                    "/home/andrea/myLib/MultiBoost-1.2.02/outFountain08",
                                    "/home/andrea/myLib/MultiBoost-1.2.02/outFountain09",
                                    "/home/andrea/myLib/MultiBoost-1.2.02/outFountain10"};*/
}
    int i=0;
  for(auto p:paths){
    file.open(p);
    std::string line;
    std::getline(file, line);
    //while(!file.eof()){
      cv::Mat imageCur = cv::Mat::zeros(image.size(), CV_8UC3);
      int count=0;
      int id, classLabel;
      for (int r = W; r < image.rows-W; ++r){
        for (int c = W; c < image.cols-W; ++c){
          //if(count%2==0){
          std::string line;
          std::getline(file, line);

          std::istringstream iss(line);
          iss >> id >> classLabel;
          imageCur.at<cv::Vec3b>(r,c).val[0] = classColor[classLabel].val[0]*255.0;
          imageCur.at<cv::Vec3b>(r,c).val[1] = classColor[classLabel].val[1] *255.0;
          imageCur.at<cv::Vec3b>(r,c).val[2] = classColor[classLabel].val[2] *255.0;
          //}else{
          //  imageCur.at<cv::Vec3b>(r,c).val[0] = classColor[classLabel].val[0]*255.0;
          //  imageCur.at<cv::Vec3b>(r,c).val[1] = classColor[classLabel].val[1] *255.0;
          //  imageCur.at<cv::Vec3b>(r,c).val[2] = classColor[classLabel].val[2] *255.0;
          //}
          ++count;
        }
      }
      std::stringstream ss;
      boost::format fmt("%04d");
      fmt % i;
      ss<<"res/DTU15"<<fmt.str()<<".png";
      cv::imwrite(ss.str(),imageCur);
      ++i;
    //}
      file.close();
  }
}



void toGrayImages(){
  std::string basepahth = "/home/andrea/Desktop/Datasets/EpflDataset/fountain_dense/seg/result/";

  for (int i = 0; i < 11; ++i){
      std::stringstream pathOrigFile, pathGrayFile;
      boost::format fmt("%04d");
      fmt % i;
      pathOrigFile<<basepahth<<fmt.str()<<"_rgb.png";
      pathGrayFile<<basepahth<<fmt.str()<<".png";
      cv::Mat image = cv::imread(pathOrigFile.str());
      std::cout<<"Processing image: "<<pathOrigFile.str()<<std::endl;

      cv::Mat imageCur(image.size(),CV_8UC1);
      int count =0;
      for (int r = 0; r < image.rows; ++r){
        for (int c = 0; c < image.cols; ++c){
          cv::Scalar color( static_cast<float>(image.at<cv::Vec3b>(r,c).val[0]/255),
                            static_cast<float>(image.at<cv::Vec3b>(r,c).val[1]/255),
                            static_cast<float>(image.at<cv::Vec3b>(r,c).val[2]/255));

          //std::cout<<color<<" comparing to: "<<std::flush;
          int id = 255;
          for (auto it = classColor.begin(); it != classColor.end(); ++it ){
          //std::cout<< it->second<<" "<<std::flush;
            if ((int)it->second.val[0] == (int)color.val[0] && 
                (int)it->second.val[1] == (int)color.val[1] && 
                (int)it->second.val[2] == (int)color.val[2]){
                id =  it->first;
                count++;
                break;
            }
          }
          //std::cout <<id<<std::endl;

          if(id ==255){
            imageCur.at<unsigned char>(r,c) = 255;
          }else{
            imageCur.at<unsigned char>(r,c) = colorGray[id];
          }
        }
      }
      std::cout<<"Num found: "<< count<<std::endl;
      //exit(0);

      cv::imwrite(pathGrayFile.str(),imageCur);
  }
}

int main(int argc, char const *argv[]){/*
  classColor[0]=cv::Scalar(0,0,0);
  classColor[1]=cv::Scalar(0,0.8,0);
  classColor[2]=cv::Scalar(0.3,0.5,0);
  classColor[3]=cv::Scalar(0.7, 0.8, 0.9);
  classColor[4]=cv::Scalar(0.5, 0.5, 0);
  classColor[5]=cv::Scalar(0, 0.7, 0.7);
  classColor[6]=cv::Scalar(0.9, 0, 0);
  classColor[7]=cv::Scalar(0.2, 0.2, 0.9);
  classColor[8]=cv::Scalar(0.3, 0.7, 0.1);
  classColor[9]=cv::Scalar(0.1, 0.1, 0.1);*/
  classColor[0]=cv::Scalar(1.0,0,0);
  classColor[1]=cv::Scalar(0,1.0,0);
  classColor[2]=cv::Scalar(0.0,0.0,1.0);
  classColor[3]=cv::Scalar(0.0,0.0,0.0);

  colorGray[0]=2;
  colorGray[1]=0;
  colorGray[2]=13;
  colorGray[3]=21;


  //classColor[3]=cv::Scalar(0.0,0.0,0.0);
  generate();
  //read();
  //toGrayImages();
}
